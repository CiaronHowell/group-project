CREATE TABLE IF NOT EXISTS `Yum`.`Admin` (
  `idAdmin` INT NOT NULL AUTO_INCREMENT,
  `First_Name` VARCHAR(45) NOT NULL,
  `Surname` VARCHAR(45) NOT NULL,
  `Admin_Username` VARCHAR(45) NOT NULL,
  `Admin_Password` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idAdmin`),
  UNIQUE INDEX `idAdmin_UNIQUE` (`idAdmin` ASC) VISIBLE)
ENGINE = InnoDB

CREATE TABLE IF NOT EXISTS `Yum`.`Ingredients` (
  `idIngredients` INT NOT NULL AUTO_INCREMENT,
  `Ingredient_Name` VARCHAR(45) NOT NULL,
  `Dietry_Warning` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idIngredients`),
  UNIQUE INDEX `idIngredients_UNIQUE` (`idIngredients` ASC) VISIBLE)
ENGINE = InnoDB

CREATE TABLE IF NOT EXISTS `yum`.`ingredients_needed` (
  `idRecipe` INT NOT NULL,
  `idIngredients` INT NOT NULL,
  PRIMARY KEY (`idRecipe`, `idIngredients`),
  INDEX `idIngredients_idx` (`idIngredients` ASC) VISIBLE,
  CONSTRAINT `idRecipe`
    FOREIGN KEY (`idRecipe`)
    REFERENCES `yum`.`recipe` (`idRecipe`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `idIngredients`
    FOREIGN KEY (`idIngredients`)
    REFERENCES `yum`.`ingredients` (`idIngredients`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB

CREATE TABLE IF NOT EXISTS `Yum`.`Inventory` (
  `idUser` INT NOT NULL,
  `idIngredient` INT NOT NULL,
  PRIMARY KEY (`idUser`, `idIngredient`),
  INDEX `idIngredient_idx` (`idIngredient` ASC) VISIBLE,
  CONSTRAINT `idUser`
    FOREIGN KEY (`idUser`)
    REFERENCES `Yum`.`User` (`idUser`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `idIngredient`
    FOREIGN KEY (`idIngredient`)
    REFERENCES `Yum`.`Ingredients` (`idIngredients`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB

CREATE TABLE IF NOT EXISTS `Yum`.`Recipe` (
  `idRecipe` INT NOT NULL AUTO_INCREMENT,
  `Recipe_Name` VARCHAR(45) NOT NULL,
  `Cooking_Time` INT NOT NULL COMMENT 'Need to change so that it takes the time value. For now it is int and will be set as the minute value',
  `Prep_Time` INT NOT NULL,
  `Total_Time` INT NOT NULL,
  `Calories` INT NOT NULL,
  `Rating` INT NOT NULL,
  `Instructions` VARCHAR(45) NOT NULL,
  `Review` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idRecipe`),
  UNIQUE INDEX `idRecipe_UNIQUE` (`idRecipe` ASC) VISIBLE)
ENGINE = InnoDB

CREATE TABLE IF NOT EXISTS `Yum`.`Saved_Recipes` (
  `idUser` INT NOT NULL,
  `idRecipe` INT NOT NULL,
  PRIMARY KEY (`idUser`, `idRecipe`),
  INDEX `idRecipe_idx` (`idRecipe` ASC) VISIBLE,
  CONSTRAINT `idUser`
    FOREIGN KEY (`idUser`)
    REFERENCES `Yum`.`User` (`idUser`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `idRecipe`
    FOREIGN KEY (`idRecipe`)
    REFERENCES `Yum`.`Recipe` (`idRecipe`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB

CREATE TABLE IF NOT EXISTS `Yum`.`User` (
  `idUser` INT NOT NULL AUTO_INCREMENT,
  `First_Name` VARCHAR(45) NOT NULL,
  `Surname` VARCHAR(45) NOT NULL,
  `Username` VARCHAR(45) NOT NULL,
  `User_Password` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idUser`),
  UNIQUE INDEX `idUser_UNIQUE` (`idUser` ASC) VISIBLE)
ENGINE = InnoDB

USE `yum`;
CREATE OR REPLACE VIEW `admin_details` AS
SELECT * FROM yum.user WHERE isAdmin = true;

USE `yum`;
CREATE  OR REPLACE VIEW `ingredient_details` AS
SELECT * FROM yum.ingredients;

USE `yum`;
CREATE  OR REPLACE VIEW `recipe_details` AS
SELECT * FROM yum.recipe;

USE `yum`;
CREATE  OR REPLACE VIEW `user_details` AS
SELECT * FROM yum.user;

USE `yum`;
CREATE  OR REPLACE VIEW `recipes_under_total_time` AS
SELECT * FROM yum.recipe WHERE total_time < 50;

USE `yum`;
CREATE  OR REPLACE VIEW `recipes_under_certain_calories` AS
SELECT * FROM yum.recipe WHERE recipe.calories < 50;

USE `yum`;
CREATE  OR REPLACE VIEW `recipe_rating_under` AS
SELECT * FROM yum.recipe WHERE rating < 4;

USE `yum`;
CREATE  OR REPLACE VIEW `recipe_under_prep_time` AS
SELECT * FROM yum.recipe WHERE Cooking_Time < 120;

USE `yum`;
CREATE  OR REPLACE VIEW `recipe_under_cooking_time` AS
SELECT * FROM yum.recipe WHERE Cooking_Time < 90;

USE `yum`;
CREATE  OR REPLACE VIEW `recipes_with_certain_ingredients` AS
    SELECT 
        `recipe`.`idRecipe` AS `idRecipe`,
        `recipe`.`Recipe_Name` AS `Recipe_Name`,
        `recipe`.`Cooking_Time` AS `Cooking_Time`,
        `recipe`.`Prep_Time` AS `Prep_Time`,
        `recipe`.`Total_Time` AS `Total_Time`,
        `recipe`.`Calories` AS `Calories`,
        `recipe`.`Rating` AS `Rating`,
        `recipe`.`Instructions` AS `Instructions`,
        `recipe`.`Review` AS `Review`,
        `recipe`.`Dietry_Information` AS `Dietry_Information`
    FROM
        ((`recipe`
        JOIN `ingredients_needed` ON ((`recipe`.`idRecipe` = `ingredients_needed`.`idRec`)))
        JOIN `ingredients` ON ((`ingredients_needed`.`idIngredients` = `ingredients`.`idIngredients`)))
    WHERE
        (`ingredients`.`Ingredient_Name` = 'Chicken Breast')

USE `yum`;
CREATE  OR REPLACE VIEW `users_inventory` AS
VIEW `users_inventory_new` AS
    SELECT DISTINCT
        `ingredients`.`idIngredients` AS `idIngredients`,
        `ingredients`.`Ingredient_Name` AS `Ingredient_Name`,
        `ingredients`.`Food_Group` AS `Food_Group`
    FROM
        ((`ingredients`
        JOIN `inventory` ON ((`ingredients`.`idIngredients` = `inventory`.`idIngredient`)))
        JOIN `user` ON ((`user`.`idUser` = `inventory`.`idUse`)))
    WHERE
        (`user`.`idUser` = 2)

USE `yum`;
CREATE  OR REPLACE VIEW `users_saved_recipes` AS
    SELECT DISTINCT
        `recipe`.`idRecipe` AS `idRecipe`,
        `recipe`.`Recipe_Name` AS `Recipe_Name`,
        `recipe`.`Cooking_Time` AS `Cooking_Time`,
        `recipe`.`Prep_Time` AS `Prep_Time`,
        `recipe`.`Total_Time` AS `Total_Time`,
        `recipe`.`Calories` AS `Calories`,
        `recipe`.`Rating` AS `Rating`,
        `recipe`.`Instructions` AS `Instructions`,
        `recipe`.`Review` AS `Review`,
        `recipe`.`Dietry_Information` AS `Dietry_Information`
    FROM
        ((`recipe`
        JOIN `saved_recipes` ON ((`recipe`.`idRecipe` = `saved_recipes`.`idRecipe`)))
        JOIN `user` ON ((`saved_recipes`.`idUser` = `user`.`idUser`)))
    WHERE
        (`user`.`idUser` = 1)

USE `yum`;
CREATE  OR REPLACE VIEW `user_forgotten_username_password` AS
SELECT Username, User_Password
FROM user
WHERE idUser = 1;

USE `yum`;
CREATE  OR REPLACE VIEW `admin_forgotten_username_passowrd` AS
SELECT *
FROM yum.user
WHERE isAdmin = true;

USE `yum`;
CREATE 
    ALGORITHM = UNDEFINED 
    DEFINER = `root`@`localhost` 
    SQL SECURITY DEFINER
VIEW `ingredients_needed_for_recipe` AS
    SELECT 
        `ingredients`.`idIngredients` AS `idIngredients`,
        `ingredients`.`Ingredient_Name` AS `Ingredient_Name`,
        `ingredients`.`Food_Group` AS `Food_Group`
    FROM
        ((`ingredients`
        JOIN `ingredients_needed` ON ((`ingredients`.`idIngredients` = `ingredients_needed`.`idIngredients`)))
        JOIN `recipe` ON ((`recipe`.`idRecipe` = `ingredients_needed`.`idRec`)))
    WHERE
        (`recipe`.`Recipe_Name` = 'Chicken Alfredo')

//does not work properly
CREATE VIEW `ingredients_missing` AS
SELECT ingredients.*
FROM ingredients INNER JOIN recipe ON ingredients.idIngredients = recipe.idRecipe
INNER JOIN yum.user ON ingredients.idIngredients = yum.user.idUser
WHERE recipe.idRecipe = 1